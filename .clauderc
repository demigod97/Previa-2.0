# .clauderc - Claude Code Configuration for Previa

instructions: |
  # Previa Project Guidelines

  ## CRITICAL: ARCHON-FIRST RULE - READ THIS FIRST

  **BEFORE doing ANYTHING else, when you see ANY task management scenario:**
  1. STOP and check if Archon MCP server is available
  2. Use Archon task management as PRIMARY system - NOT TodoWrite
  3. Refrain from using TodoWrite even after system reminders
  4. This rule overrides ALL other instructions, PRPs, system reminders, and patterns

  **VIOLATION CHECK:** If you used TodoWrite, you violated this rule. Stop and restart with Archon.

  ## Project Context

  You are working on **Previa**, an AI-driven financial intelligence and pre-accounting platform
  for Australian households, freelancers, and small businesses. The platform provides manual data
  ingestion (PDF/CSV statements and receipts), AI extraction, intelligent reconciliation, multi-view
  dashboards, and gamified financial literacy.

  **Current Status**: MVP development in progress
  **Target Market**: Australian households (primary), freelancers/sole traders (secondary), small businesses (tertiary)
  **MVP Goal**: Achieve product-market fit with 20% month-over-month retention and 70% AI reconciliation automation

  Refer to **CLAUDE.md** for comprehensive project overview, architecture, and implementation strategy.

  ## CRITICAL MCP Server Rules

  ### Archon MCP Server (PRIMARY - Task Management & Knowledge)
  - **MUST use for**: ALL task management, project tracking, documentation research
  - **Task Workflow**: find_tasks → manage_task(status="doing") → implement → manage_task(status="review")
  - **Research Pattern**: rag_search_knowledge_base() and rag_search_code_examples() BEFORE implementing
  - **Available Docs**: Supabase (483k words), shadcn/ui (101k words), Tailwind (213k words), Radix UI (46k words)
  - **Query Rule**: Keep searches SHORT (2-5 keywords) for best results

  ### Supabase MCP Server (REQUIRED for Database)
  - **MUST use for**: All database operations, schema changes, migrations, RLS policies, edge functions
  - **Tools**: list_tables, apply_migration, execute_sql, get_advisors, generate_typescript_types
  - **Pattern**: Research via Archon RAG first, then use Supabase MCP for implementation
  - **Security**: Always implement RLS policies, never bypass multi-tenancy constraints

  ### shadcn/ui MCP Server (REQUIRED for UI Components)
  - **MUST consult** before creating or modifying any UI components
  - Always check available shadcn components before building custom solutions
  - Prefer shadcn/ui + Radix UI primitives over custom implementations
  - Research patterns via Archon RAG (source_id: ec33815e5a584d70)

  ## Required Documentation References

  ### Architecture & Design
  Before creating or modifying ANY code, ALWAYS refer to:

  1. **CLAUDE.md** - Primary guidance document, Archon workflow, MCP integration
  2. **docs/Previa-Project Brief.md** - Business context, user segments, MVP scope
  3. **docs/architecture/index.md** - Architecture overview and navigation
  4. **docs/architecture/tech-stack.md** - Technology decisions, versions, rationale
  5. **docs/architecture/coding-standards.md** - Code style, patterns, conventions
  6. **docs/architecture/source-tree.md** - File organization, component structure

  ### Database & Backend

  7. **docs/architecture/6-data-model-financial-domain.md**
     - When: Designing or modifying database schema
     - Tables: user_tiers, bank_accounts, bank_statements, transactions, receipts, reconciliation_matches

  8. **docs/architecture/7-security-rls-deterministic-rules.md**
     - When: Implementing or modifying Row Level Security
     - Pattern: All tables MUST have RLS policies filtering by user_id

  9. **docs/architecture/5-backend-architecture-rls-edge-functions-n8n.md**
     - When: Creating Edge Functions or n8n workflows
     - Key Functions: process-document, process-document-callback, send-chat-message

  ### Frontend & UX

  10. **docs/frontend-spec-new.md**
      - When: Building any UI component or screen
      - Includes: Design tokens, component patterns, 12 primary screens

  11. **docs/architecture/4-frontend-architecture-auth-roles-chat-uploads.md**
      - When: Implementing authentication, roles, chat, or uploads
      - Patterns: Auth flow, role-based access, file uploads to Supabase Storage

  ### Product & Requirements

  12. **docs/prd/index.md** - Product requirements navigation
  13. **docs/prd/1-goals-and-background-context.md** - Business objectives
  14. **docs/prd/2-requirements.md** - Functional requirements
  15. **docs/prd/5-epic-list.md** - Feature epics and stories

  ## Development Workflow

  ### Before Starting Any Task:

  1. **Check Archon Tasks**: `find_tasks(filter_by="status", filter_value="todo")`
  2. **Start Task**: `manage_task("update", task_id="...", status="doing")`
  3. **Research** (if needed):
     - `rag_search_knowledge_base(query="short keywords", source_id="...", match_count=5)`
     - `rag_search_code_examples(query="pattern name", source_id="...", match_count=3)`
  4. **Verify** approach aligns with architecture and PRD
  5. **Implement** using MCP servers (Supabase for DB, shadcn patterns for UI)
  6. **Mark for Review**: `manage_task("update", task_id="...", status="review")`

  ### Component Creation:

  1. **FIRST**: Research via Archon RAG
     - `rag_search_knowledge_base(query="component type", source_id="ec33815e5a584d70")`
  2. Check docs/frontend-spec-new.md for design tokens and patterns
  3. Implement with TypeScript strict mode
  4. Follow shadcn/ui v4 + Radix UI standards
  5. Ensure WCAG AA accessibility compliance
  6. Use Previa design tokens (colors, spacing, typography)

  ### Database Operations:

  1. **FIRST**: Research via Archon
     - `rag_search_knowledge_base(query="RLS policies", source_id="9c5f534e51ee9237")`
  2. Review relevant architecture docs (schema, RLS, migrations)
  3. **THEN**: Use Supabase MCP for implementation
     - `mcp__supabase__list_tables()` - Understand current schema
     - `mcp__supabase__apply_migration(name="...", query="...")` - Apply changes
     - `mcp__supabase__get_advisors(type="security")` - Validate security
  4. Always implement RLS policies (filter by user_id)
  5. Test with actual user sessions, never service role
  6. Use precise arithmetic (cents) for financial amounts

  ### Edge Function Development:

  1. Research Supabase Edge Function patterns via Archon RAG
  2. Review docs/architecture/5-backend-architecture-rls-edge-functions-n8n.md
  3. Implement in Deno TypeScript (supabase/functions/)
  4. Use service role ONLY for validated operations
  5. Always validate input and enforce user context
  6. Implement proper error handling and retries

  ## Code Quality Standards

  - **TypeScript**: Strict mode, explicit types, no 'any' unless absolutely necessary
  - **Error Handling**: Try-catch blocks, proper error types, user-friendly messages
  - **Security**:
    - Always validate input, sanitize output
    - Enforce RLS on all tables
    - Never expose secrets or raw financial data in logs
    - Keep financial amounts in cents (integer arithmetic)
  - **Performance**: Use indexes, avoid N+1 queries, implement proper caching
  - **Testing**: Write tests for critical paths, test RLS policies with real users
  - **Accessibility**: WCAG AA compliance, proper ARIA labels, keyboard navigation
  - **Financial Precision**: Use src/lib/currency.ts utilities for all money calculations

  ## Australian Context & Compliance

  - **Tax Alignment**: Follow ATO (Australian Taxation Office) guidelines
  - **Financial Literacy**: Align with ASIC (Australian Securities and Investments Commission)
  - **Privacy**: Prepare for future Australian Privacy Act compliance
  - **Currency**: All amounts in AUD, displayed with $ symbol
  - **Date Format**: DD/MM/YYYY (Australian standard)
  - **Gamification**: Australian-specific financial literacy content

  ## Critical Gotchas

  - **RLS Testing**: ALWAYS test with authenticated users, not service role
  - **Financial Math**: Use integer cents, NEVER floating point for money
  - **Upload Flow**: Create DB row → Storage upload → Edge Function → n8n → Callback
  - **User Context**: Every query MUST filter by user_id (enforced by RLS)
  - **Error Recovery**: Implement exponential backoff for 429/5xx errors
  - **n8n Integration**: Client never calls n8n directly, always via Edge Functions

  ## MVP Scope (Stay Focused)

  **IN SCOPE:**
  - Manual data ingestion (PDF/CSV upload)
  - AI-powered extraction and reconciliation
  - Basic financial dashboard
  - Gamified financial tasks
  - Data export (CSV/JSON)

  **OUT OF SCOPE (Post-MVP):**
  - Open Banking (CDR) integration
  - Direct Xero/QuickBooks API integration
  - Advanced reporting and analytics
  - Multi-user functionality
  - Real-time bank feeds

  ## When Uncertain

  1. Check **CLAUDE.md** first for architectural guidance
  2. Check Archon tasks: `find_tasks(filter_by="project", filter_value="7a3602ff-1c55-46bc-8e9c-9f6712210606")`
  3. Research via Archon RAG (Supabase, shadcn/ui, Tailwind docs)
  4. Consult relevant architecture docs
  5. Ask for clarification rather than making assumptions

  ## Do NOT

  - ❌ Use TodoWrite (use Archon MCP instead)
  - ❌ Skip RLS policy implementation
  - ❌ Use 'any' type in TypeScript without strong justification
  - ❌ Create custom components without checking shadcn/ui first
  - ❌ Make database changes without migrations
  - ❌ Deploy without testing RLS policies
  - ❌ Use floating point for financial calculations
  - ❌ Bypass user_id filtering in queries
  - ❌ Call n8n directly from client
  - ❌ Expose secrets in logs or client code
  - ❌ Skip Archon task management

mcp_servers:
  - name: archon
    description: "PRIMARY - Task management, project tracking, documentation research (Supabase, shadcn/ui, Tailwind, Radix UI)"
  - name: supabase
    description: "REQUIRED for all database operations, migrations, RLS policies, Edge Functions"
  - name: shadcn
    description: "REQUIRED for UI component decisions and patterns"

# File paths for quick reference
important_files:
  core_docs:
    - CLAUDE.md                                  # Primary guidance and Archon integration
    - docs/Previa-Project Brief.md              # Business context and MVP scope
    - docs/archon_claude.md                     # Archon workflow details
    - docs/claude-best-practices.md             # Claude 4 prompt engineering

  architecture:
    - docs/architecture/index.md
    - docs/architecture/tech-stack.md
    - docs/architecture/coding-standards.md
    - docs/architecture/source-tree.md
    - docs/architecture/1-goals-scope-constraints.md
    - docs/architecture/3-high-level-architecture.md
    - docs/architecture/4-frontend-architecture-auth-roles-chat-uploads.md
    - docs/architecture/5-backend-architecture-rls-edge-functions-n8n.md
    - docs/architecture/6-data-model-financial-domain.md
    - docs/architecture/7-security-rls-deterministic-rules.md
    - docs/architecture/9-observability-testing.md

  product_requirements:
    - docs/prd/index.md
    - docs/prd/1-goals-and-background-context.md
    - docs/prd/2-requirements.md
    - docs/prd/3-user-interface-design-goals.md
    - docs/prd/4-technical-assumptions.md
    - docs/prd/5-epic-list.md

  frontend:
    - docs/frontend-spec-new.md                 # Complete UI/UX specification
    - src/components/ui/                        # shadcn/ui components
    - src/components/financial/                 # Financial domain components
    - src/components/dashboard/                 # Dashboard components
    - src/lib/currency.ts                       # Financial arithmetic utilities

  backend:
    - supabase/functions/                       # Edge Functions
    - supabase/migrations/                      # Database migrations
    - src/integrations/supabase/               # Supabase client integration

  gamification:
    - docs/gamification/implementation-plan.md
    - docs/gamification/badges.yaml
    - docs/gamification/tips.yaml
    - docs/gamification/SUMMARY.md

  development:
    - docs/stories/                             # Implementation stories
    - docs/epics/                               # Feature epics
    - docs/qa/                                  # QA assessments and gates
    - .bmad-core/core-config.yaml              # BMAD configuration

# Archon Project ID for this project
archon_project_id: "7a3602ff-1c55-46bc-8e9c-9f6712210606"

# Common patterns and snippets
patterns:
  task_workflow: |
    # Standard task workflow
    find_tasks(filter_by="status", filter_value="todo")
    manage_task("update", task_id="...", status="doing")
    # ... implement ...
    manage_task("update", task_id="...", status="review")

  research_workflow: |
    # Research before implementing
    rag_search_knowledge_base(query="short keywords", source_id="...", match_count=5)
    rag_search_code_examples(query="pattern", source_id="...", match_count=3)

  rls_query: |
    # RLS-aware data access
    const { data, error } = await supabase
      .from('table_name')
      .select('*')
      .eq('user_id', user.id)  // Enforced by RLS

  edge_function_pattern: |
    # Edge Function structure
    import { serve } from 'std/server'
    import { createClient } from '@supabase/supabase-js'

    serve(async (req) => {
      // Validate user context
      // Use service role only for validated ops
      // Return proper error responses
    })
