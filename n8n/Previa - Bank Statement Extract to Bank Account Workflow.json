{
  "name": "Previa - Bank Transaction Extract",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload-statement",
        "authentication": "headerAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        192,
        -848
      ],
      "id": "85917559-963c-41d3-b946-a1ede0058038",
      "name": "Webhook",
      "webhookId": "f1004560-b20d-400f-b51a-8422075b1005",
      "credentials": {
        "httpHeaderAuth": {
          "id": "zBeDJWr8H7jpwewx",
          "name": "Previa-n8n-Header-Auth"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"type\": \"document_url\",\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"include_image_base64\": true\n}",
        "options": {}
      },
      "id": "019d27b6-622c-4bfd-9777-1b1c03901939",
      "name": "Mistral DOC OCR",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1536,
        -848
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "KNmE7poQRylPZsiI",
          "name": "Previa-Mistral-wwdtt"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "24"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "28c63fe8-db18-48b2-937e-6c90132c2dd6",
      "name": "Mistral Signed URL",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1312,
        -848
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "KNmE7poQRylPZsiI",
          "name": "Previa-Mistral-wwdtt"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "pagination": {}
        }
      },
      "id": "6132c1f3-55ac-4419-b406-62bd8f441662",
      "name": "Mistral Upload",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1088,
        -848
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "KNmE7poQRylPZsiI",
          "name": "Previa-Mistral-wwdtt"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9fea51c0-b3a9-49b5-8608-3264c9d00304",
              "name": "extracted_text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        416,
        -112
      ],
      "id": "daa5c9ce-b679-4933-80c6-16f70eddd296",
      "name": "Extracted Text"
    },
    {
      "parameters": {
        "fieldToSplitOut": "pages",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1760,
        -848
      ],
      "id": "1ede6cb0-f832-4387-be48-b7c3a010fbce",
      "name": "Split Out"
    },
    {
      "parameters": {
        "fieldToSplitOut": "markdown",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1984,
        -848
      ],
      "id": "59762417-5476-4b55-b26e-8687e7b27b83",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "markdown"
            }
          ]
        },
        "options": {
          "mergeLists": false
        }
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2208,
        -848
      ],
      "id": "a28e0055-cf93-4411-8894-225f20628c5d",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "jsCode": "// ============================================================================\n// UNIVERSAL AUSTRALIAN BANK STATEMENT PARSER - COMPLETE VERSION\n// ============================================================================\n// Handles: CBA, NAB, ANZ, Westpac, and other Australian banks\n// Mode: Run Once for All Items\n// ============================================================================\n\n// ============================================================================\n// STEP 1: INPUT EXTRACTION (FIXED FOR MARKDOWN ARRAY)\n// ============================================================================\n\nlet textContent;\ntry {\n  const firstItem = $input.first().json;\n  \n  // markdown is an array of strings - join them\n  if (Array.isArray(firstItem.markdown)) {\n    textContent = firstItem.markdown.join('\\n');\n  } else if (typeof firstItem.markdown === 'string') {\n    textContent = firstItem.markdown;\n  } else {\n    throw new Error('markdown field is not an array or string');\n  }\n  \n  if (!textContent || textContent.trim().length === 0) {\n    throw new Error('No text content found in markdown field');\n  }\n  \n} catch (error) {\n  return [{\n    json: {\n      error: true,\n      message: `Failed to extract text content: ${error.message}`,\n      debugInfo: {\n        inputStructure: JSON.stringify($input.first().json, null, 2).substring(0, 500)\n      }\n    },\n    pairedItem: 0\n  }];\n}\n\n// ============================================================================\n// CONFIGURATION: Australian Bank Patterns\n// ============================================================================\n\nconst AUSTRALIAN_BANKS = {\n  'Commonwealth Bank': { bsbPrefix: '06', aliases: ['CBA', 'CommBank', 'Commonwealth'] },\n  'Westpac': { bsbPrefix: '03', aliases: ['Westpac Banking', 'Westpac Bank'] },\n  'NAB': { bsbPrefix: '08', aliases: ['National Australia Bank', 'NAB Bank'] },\n  'ANZ': { bsbPrefix: '01', aliases: ['Australia and New Zealand Banking', 'ANZ Bank'] },\n  'Bendigo Bank': { bsbPrefix: '63', aliases: ['Bendigo', 'Bendigo Adelaide'] },\n  'Bank of Queensland': { bsbPrefix: '124', aliases: ['BOQ', 'BoQ'] },\n  'Macquarie Bank': { bsbPrefix: '182', aliases: ['Macquarie'] },\n  'Suncorp': { bsbPrefix: '484', aliases: ['Suncorp Bank'] },\n  'ING': { bsbPrefix: '923', aliases: ['ING Direct'] },\n  'St George': { bsbPrefix: '11', aliases: ['St George Bank'] }\n};\n\nconst ACCOUNT_TYPES = [\n  'Business Transaction Account',\n  'Transaction Account',\n  'Savings Account',\n  'Business Cheque Account',\n  'Everyday Account',\n  'Access Account',\n  'Complete Access',\n  'Smart Access',\n  'Choice',\n  'Classic Banking'\n];\n\n// ============================================================================\n// HELPER: Detect Bank Institution\n// ============================================================================\n\nfunction detectBankInstitution(text) {\n  for (const [bankName, config] of Object.entries(AUSTRALIAN_BANKS)) {\n    const regex = new RegExp(bankName, 'i');\n    if (regex.test(text)) {\n      return { name: bankName, config };\n    }\n    \n    for (const alias of config.aliases) {\n      const aliasRegex = new RegExp(alias, 'i');\n      if (aliasRegex.test(text)) {\n        return { name: bankName, config };\n      }\n    }\n  }\n  \n  const bsbMatch = text.match(/\\b(\\d{2,3})[- ]?\\d{3}\\b/);\n  if (bsbMatch) {\n    const bsbPrefix = bsbMatch[1];\n    for (const [bankName, config] of Object.entries(AUSTRALIAN_BANKS)) {\n      if (config.bsbPrefix === bsbPrefix) {\n        return { name: bankName, config };\n      }\n    }\n  }\n  \n  return { name: 'Unknown Bank', config: { bsbPrefix: null, aliases: [] } };\n}\n\n// ============================================================================\n// HELPER: Extract Account Holder Name (Universal)\n// ============================================================================\n\nfunction extractAccountHolderName(text) {\n  const nameFieldPatterns = [\n    /Name:\\s*([A-Z][A-Za-z\\s\\-'.&()]+?)(?:\\n|Account)/i,\n    /Account Name:\\s*([A-Z][A-Za-z\\s\\-'.&()]+?)(?:\\n|Account)/i,\n    /Account Holder:\\s*([A-Z][A-Za-z\\s\\-'.&()]+?)(?:\\n|Account)/i\n  ];\n  \n  for (const pattern of nameFieldPatterns) {\n    const match = text.match(pattern);\n    if (match) {\n      const fullName = match[1].trim();\n      const businessIndicators = ['PTY LTD', 'LIMITED', 'SOLUTIONS', 'SERVICES', 'TRADING AS', 'T/A', 'TA RAAVA'];\n      const isBusiness = businessIndicators.some(indicator => \n        fullName.toUpperCase().includes(indicator)\n      );\n      \n      if (isBusiness) {\n        const parts = fullName.split(/(?:TA|T\\/A|TRADING AS)\\s+/i);\n        return {\n          fullName: fullName,\n          personalName: parts[0]?.trim() || null,\n          businessName: parts[1]?.trim() || fullName,\n          accountType: 'business'\n        };\n      }\n      \n      return {\n        fullName: fullName,\n        personalName: fullName,\n        businessName: null,\n        accountType: 'personal'\n      };\n    }\n  }\n  \n  const addressBlockPattern = /^([A-Z][A-Z\\s\\-'.&()]+?)\\n\\d+\\s+[A-Z]/m;\n  const addressMatch = text.match(addressBlockPattern);\n  if (addressMatch) {\n    const name = addressMatch[1].trim();\n    return {\n      fullName: name,\n      personalName: name,\n      businessName: null,\n      accountType: 'personal'\n    };\n  }\n  \n  const titlePattern = /(MR|MS|MRS|DR|MISS)\\s+([A-Z][A-Za-z\\s\\-'.]+?)(?:\\n|\\s{2,})/;\n  const titleMatch = text.match(titlePattern);\n  if (titleMatch) {\n    const name = `${titleMatch[1]} ${titleMatch[2]}`.trim();\n    return {\n      fullName: name,\n      personalName: name,\n      businessName: null,\n      accountType: 'personal'\n    };\n  }\n  \n  return {\n    fullName: 'Unknown Account Holder',\n    personalName: null,\n    businessName: null,\n    accountType: 'unknown'\n  };\n}\n\n// ============================================================================\n// HELPER: Extract Address\n// ============================================================================\n\nfunction extractAddress(text) {\n  const addressPatterns = [\n    /\\n(\\d+\\s+[A-Z][A-Za-z\\s]+(?:ST|STREET|RD|ROAD|AVE|AVENUE|DR|DRIVE|CT|COURT|PL|PLACE|CRES|CRESCENT)\\s*\\n[A-Z][A-Z\\s]+\\s+(?:VIC|NSW|QLD|SA|WA|TAS|NT|ACT)\\s+\\d{4})/i,\n    /(\\d+\\s+[A-Z][A-Za-z\\s]+,?\\s+[A-Z][A-Z\\s]+\\s+(?:VIC|NSW|QLD|SA|WA|TAS|NT|ACT)\\s+\\d{4})/i\n  ];\n  \n  for (const pattern of addressPatterns) {\n    const match = text.match(pattern);\n    if (match) {\n      return match[1].replace(/\\n/g, ' ').trim();\n    }\n  }\n  \n  return null;\n}\n\n// ============================================================================\n// HELPER: Extract Account Information\n// ============================================================================\n\nfunction extractAccountInfo(text, bankInfo) {\n  const accountPatterns = [\n    /Account Number[:\\s]+(\\d[\\d\\s-]+)/i,\n    /Account No\\.?[:\\s]+(\\d[\\d\\s-]+)/i,\n    /A\\/C[:\\s]+(\\d[\\d\\s-]+)/i,\n    /Account[:\\s]+(\\d[\\d\\s-]+)/i\n  ];\n  \n  let accountNumber = null;\n  for (const pattern of accountPatterns) {\n    const match = text.match(pattern);\n    if (match) {\n      accountNumber = match[1].replace(/[\\s-]/g, '');\n      break;\n    }\n  }\n  \n  if (!accountNumber) {\n    return null;\n  }\n  \n  let bsb = null;\n  const bsbPattern = /\\b(\\d{2,3})[- ]?(\\d{3})\\b/;\n  \n  const contextStart = Math.max(0, text.indexOf(accountNumber) - 100);\n  const contextEnd = Math.min(text.length, text.indexOf(accountNumber) + 100);\n  const context = text.substring(contextStart, contextEnd);\n  const bsbMatch = context.match(bsbPattern);\n  \n  if (bsbMatch) {\n    bsb = `${bsbMatch[1].padStart(3, '0')}-${bsbMatch[2]}`;\n  } else {\n    const fullBsbMatch = text.match(bsbPattern);\n    if (fullBsbMatch) {\n      bsb = `${fullBsbMatch[1].padStart(3, '0')}-${fullBsbMatch[2]}`;\n    }\n  }\n  \n  let accountType = 'Transaction Account';\n  for (const type of ACCOUNT_TYPES) {\n    if (text.includes(type)) {\n      accountType = type;\n      break;\n    }\n  }\n  \n  return {\n    accountNumber: accountNumber,\n    accountNumberMasked: accountNumber.substring(accountNumber.length - 4),\n    bsb: bsb,\n    accountType: accountType\n  };\n}\n\n// ============================================================================\n// HELPER: Parse Date Flexibly\n// ============================================================================\n\nfunction parseDateFlexible(dateStr) {\n  if (!dateStr) return null;\n  \n  const format1 = /(\\d{1,2})\\s+(\\w{3})\\s+(\\d{4})/;\n  const match1 = dateStr.match(format1);\n  if (match1) {\n    const monthMap = {\n      'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n      'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n    };\n    const day = parseInt(match1[1]);\n    const month = monthMap[match1[2]];\n    const year = parseInt(match1[3]);\n    \n    if (month !== undefined) {\n      const date = new Date(year, month, day);\n      return date.toISOString().split('T')[0];\n    }\n  }\n  \n  const format2 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const match2 = dateStr.match(format2);\n  if (match2) {\n    const day = parseInt(match2[1]);\n    const month = parseInt(match2[2]) - 1;\n    const year = parseInt(match2[3]);\n    const date = new Date(year, month, day);\n    return date.toISOString().split('T')[0];\n  }\n  \n  try {\n    const date = new Date(dateStr);\n    if (!isNaN(date.getTime())) {\n      return date.toISOString().split('T')[0];\n    }\n  } catch (e) {\n    // Ignore\n  }\n  \n  return null;\n}\n\n// ============================================================================\n// HELPER: Extract Statement Period\n// ============================================================================\n\nfunction extractStatementPeriod(text) {\n  const periodPatterns = [\n    /(?:Statement\\s+)?Period[:\\s]+(\\d{1,2}\\s+\\w{3}\\s+\\d{4})\\s*[-–]\\s*(\\d{1,2}\\s+\\w{3}\\s+\\d{4})/i,\n    /(\\d{1,2}\\s+\\w{3}\\s+\\d{4})\\s*[-–]\\s*(\\d{1,2}\\s+\\w{3}\\s+\\d{4})/,\n    /(\\d{1,2}\\/\\d{1,2}\\/\\d{4})\\s*[-–]\\s*(\\d{1,2}\\/\\d{1,2}\\/\\d{4})/\n  ];\n  \n  for (const pattern of periodPatterns) {\n    const match = text.match(pattern);\n    if (match) {\n      const startDate = parseDateFlexible(match[1]);\n      const endDate = parseDateFlexible(match[2]);\n      \n      if (startDate && endDate) {\n        return {\n          startDate: startDate,\n          endDate: endDate,\n          periodString: `${match[1]} - ${match[2]}`\n        };\n      }\n    }\n  }\n  \n  return null;\n}\n\n// ============================================================================\n// HELPER: Extract Balances (FIXED FOR LATEX)\n// ============================================================================\n\nfunction extractBalances(text) {\n  const openingPatterns = [\n    /OPENING BALANCE[|\\s]+\\$?\\\\?\\$?\\s*([\\d,]+\\.?\\d*)\\s*\\\\?mathrm\\{?(CR|DR)\\}?/i,\n    /OPENING BALANCE\\s+\\$?([\\d,]+\\.?\\d*)\\s*(CR|DR)?/i,\n    /Opening[:\\s]+\\$?([\\d,]+\\.?\\d*)\\s*(CR|DR)?/i\n  ];\n  \n  const closingPatterns = [\n    /CLOSING BALANCE[|\\s]+\\$?\\\\?\\$?\\s*([\\d,]+\\.?\\d*)\\s*\\\\?mathrm\\{?(CR|DR)\\}?/i,\n    /CLOSING BALANCE\\s+\\$?([\\d,]+\\.?\\d*)\\s*(CR|DR)?/i,\n    /Closing[:\\s]+\\$?([\\d,]+\\.?\\d*)\\s*(CR|DR)?/i\n  ];\n  \n  let openingBalance = null;\n  let closingBalance = null;\n  \n  for (const pattern of openingPatterns) {\n    const match = text.match(pattern);\n    if (match) {\n      const amount = parseFloat(match[1].replace(/,/g, ''));\n      openingBalance = match[2] === 'DR' ? -amount : amount;\n      break;\n    }\n  }\n  \n  for (const pattern of closingPatterns) {\n    const match = text.match(pattern);\n    if (match) {\n      const amount = parseFloat(match[1].replace(/,/g, ''));\n      closingBalance = match[2] === 'DR' ? -amount : amount;\n      break;\n    }\n  }\n  \n  return { openingBalance, closingBalance };\n}\n\n// ============================================================================\n// HELPER: Parse Amount with LaTeX Formatting (FIXED)\n// ============================================================================\n\nfunction parseAmount(amt) {\n  if (!amt || amt === '' || amt === ' ') return null;\n  \n  // Remove LaTeX math formatting: $\\$ 123.45 \\mathrm{CR}$\n  amt = amt\n    .replace(/\\$\\\\?\\$/g, '') // Remove $\\$\n    .replace(/\\\\mathrm\\{(CR|DR)\\}/g, '$1') // \\mathrm{CR} -> CR\n    .replace(/\\$/g, '') // Remove remaining $\n    .replace(/,/g, '') // Remove commas\n    .replace(/\\\\/g, '') // Remove backslashes\n    .trim();\n  \n  if (amt.includes('DR')) {\n    return -parseFloat(amt.replace('DR', '').trim());\n  }\n  if (amt.includes('CR')) {\n    return parseFloat(amt.replace('CR', '').trim());\n  }\n  \n  const num = parseFloat(amt);\n  return isNaN(num) ? null : num;\n}\n\n// ============================================================================\n// HELPER: Classify Transaction Type\n// ============================================================================\n\nfunction classifyTransaction(description) {\n  const desc = description.toLowerCase();\n  \n  if (desc.includes('transfer from')) return 'transfer_in';\n  if (desc.includes('transfer to')) return 'transfer_out';\n  if (desc.includes('card') || desc.includes('eftpos')) return 'card_purchase';\n  if (desc.includes('cash deposit') || desc.includes('deposit')) return 'deposit';\n  if (desc.includes('withdrawal') || desc.includes('wdl atm')) return 'withdrawal';\n  if (desc.includes('atm')) return 'atm';\n  if (desc.includes('fee') || desc.includes('charge')) return 'fee';\n  if (desc.includes('interest')) return 'interest';\n  if (desc.includes('return') || desc.includes('refund')) return 'refund';\n  if (desc.includes('direct debit') || desc.includes('dd')) return 'direct_debit';\n  if (desc.includes('bpay')) return 'bpay';\n  if (desc.includes('osko') || desc.includes('payid')) return 'instant_payment';\n  \n  return 'other';\n}\n\n// ============================================================================\n// HELPER: Extract Merchant Name\n// ============================================================================\n\nfunction extractMerchant(description) {\n  let merchant = description\n    .replace(/Card\\s+xx\\d{4}/gi, '')\n    .replace(/Value Date:.*$/gi, '')\n    .replace(/\\bAUD?\\b.*$/gi, '')\n    .replace(/\\b(USD|EUR|GBP|INR|HKD|SGD)\\s+[\\d,.]+/gi, '')\n    .trim();\n  \n  const parts = merchant.split(/\\s{2,}/);\n  merchant = parts[0] || merchant;\n  merchant = merchant.replace(/Transfer (from|to)\\s+/gi, '').trim();\n  \n  return merchant.length > 0 && merchant.length < 100 ? merchant : null;\n}\n\n// ============================================================================\n// HELPER: Parse Single Transaction\n// ============================================================================\n\nfunction parseTransaction(dateStr, description, debit, credit, balance, year) {\n  const date = parseDateFlexible(`${dateStr} ${year}`);\n  \n  const debitAmount = parseAmount(debit);\n  const creditAmount = parseAmount(credit);\n  const balanceAmount = parseAmount(balance);\n  \n  const transactionType = classifyTransaction(description);\n  const merchant = extractMerchant(description);\n  \n  const valueDateMatch = description.match(/Value Date:\\s*(\\d{2}\\/\\d{2}\\/\\d{4})/);\n  const valueDate = valueDateMatch ? parseDateFlexible(valueDateMatch[1]) : null;\n  \n  const currencyMatch = description.match(/\\b(USD|EUR|GBP|INR|HKD|SGD|NZD|CNY|JPY)\\s+([\\d,.]+)/);\n  const foreignCurrency = currencyMatch ? currencyMatch[1] : null;\n  const foreignAmount = currencyMatch ? parseFloat(currencyMatch[2].replace(/,/g, '')) : null;\n  \n  const cardMatch = description.match(/[Cc]ard\\s+(?:xx)?(\\d{4})/);\n  const cardLast4 = cardMatch ? cardMatch[1] : null;\n  \n  return {\n    date: date,\n    description: description.replace(/\\s+/g, ' ').trim(),\n    merchant: merchant,\n    debit: debitAmount,\n    credit: creditAmount,\n    amount: debitAmount ? -debitAmount : creditAmount,\n    balance: balanceAmount,\n    transactionType: transactionType,\n    valueDate: valueDate,\n    foreignCurrency: foreignCurrency,\n    foreignAmount: foreignAmount,\n    cardLast4: cardLast4,\n    category: null,\n    status: 'unreconciled'\n  };\n}\n\n// ============================================================================\n// MAIN TRANSACTION PARSER (FIXED FOR MARKDOWN TABLES)\n// ============================================================================\n\nfunction parseTransactionsFromMarkdown(text, year) {\n  const transactions = [];\n  const lines = text.split('\\n');\n  let currentTransaction = null;\n  \n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i].trim();\n    \n    // Skip empty lines, headers, and separators\n    if (!line || \n        line.includes('Date Transaction') || \n        line.match(/^[|:\\-\\s]+$/) ||\n        line.includes('Opening balance') ||\n        line.includes('Total debits')) {\n      continue;\n    }\n    \n    // Remove leading/trailing pipes\n    line = line.replace(/^\\|?\\s*/, '').replace(/\\s*\\|?$/, '');\n    \n    // Check if line starts with a date\n    const dateMatch = line.match(/^(\\d{1,2}\\s+\\w{3}|\\d{1,2}\\/\\d{1,2})/);\n    \n    if (!dateMatch) {\n      // Continuation line (Value Date, etc.)\n      if (currentTransaction && line.length > 0 && !line.includes('Statement') && !line.includes('Account Number')) {\n        currentTransaction.description += ' ' + line.replace(/<br\\s*\\/?>/gi, ' ').trim();\n      }\n      continue;\n    }\n    \n    // Parse markdown table row\n    const parts = line.split('|').map(p => p.trim()).filter(p => p.length > 0);\n    \n    if (parts.length < 2) continue;\n    \n    // Extract components\n    const dateStr = parts[0];\n    let description = parts[1] || '';\n    let debit = '';\n    let credit = '';\n    let balance = '';\n    \n    if (parts.length === 5) {\n      debit = parts[2];\n      credit = parts[3];\n      balance = parts[4];\n    } else if (parts.length === 4) {\n      debit = parts[2];\n      balance = parts[3];\n    } else if (parts.length === 3) {\n      balance = parts[2];\n    }\n    \n    // Clean description\n    description = description\n      .replace(/<br\\s*\\/?>/gi, ' ')\n      .replace(/\\s+/g, ' ')\n      .trim();\n    \n    // Skip balance lines\n    if (description.includes('OPENING BALANCE') || \n        description.includes('CLOSING BALANCE') ||\n        description === '2025 OPENING BALANCE' ||\n        description === '2025 CLOSING BALANCE') {\n      continue;\n    }\n    \n    // Parse transaction\n    try {\n      currentTransaction = parseTransaction(dateStr, description, debit, credit, balance, year);\n      if (currentTransaction.date) {\n        transactions.push(currentTransaction);\n      }\n    } catch (e) {\n      continue;\n    }\n  }\n  \n  return transactions;\n}\n\n// ============================================================================\n// MAIN: Extract Bank Statement Data\n// ============================================================================\n\nfunction extractBankStatementData(text) {\n  const bankInfo = detectBankInstitution(text);\n  const accountHolder = extractAccountHolderName(text);\n  const address = extractAddress(text);\n  const accountInfo = extractAccountInfo(text, bankInfo);\n  const period = extractStatementPeriod(text);\n  const balances = extractBalances(text);\n  \n  const statementNumMatch = text.match(/Statement\\s+(\\d+)/i);\n  const statementNumber = statementNumMatch ? parseInt(statementNumMatch[1]) : null;\n  \n  const year = period?.endDate ? period.endDate.split('-')[0] : new Date().getFullYear().toString();\n  \n  // FIXED: Use markdown parser\n  const transactions = parseTransactionsFromMarkdown(text, year);\n  \n  const totalDebits = transactions\n    .filter(t => t.debit)\n    .reduce((sum, t) => sum + t.debit, 0);\n  \n  const totalCredits = transactions\n    .filter(t => t.credit)\n    .reduce((sum, t) => sum + t.credit, 0);\n  \n  return {\n    accountHolder: {\n      fullName: accountHolder.fullName,\n      personalName: accountHolder.personalName,\n      businessName: accountHolder.businessName,\n      accountType: accountHolder.accountType,\n      address: address\n    },\n    \n    account: {\n      accountNumber: accountInfo?.accountNumber,\n      accountNumberMasked: accountInfo?.accountNumberMasked,\n      bsb: accountInfo?.bsb,\n      accountType: accountInfo?.accountType || 'Unknown',\n      institution: bankInfo.name,\n      currency: 'AUD'\n    },\n    \n    statement: {\n      statementNumber: statementNumber,\n      periodStart: period?.startDate,\n      periodEnd: period?.endDate,\n      periodString: period?.periodString,\n      openingBalance: balances.openingBalance,\n      closingBalance: balances.closingBalance,\n      totalDebits: Math.round(totalDebits * 100) / 100,\n      totalCredits: Math.round(totalCredits * 100) / 100,\n      transactionCount: transactions.length\n    },\n    \n    transactions: transactions,\n    \n    metadata: {\n      extractedAt: new Date().toISOString(),\n      source: 'pdf_extraction',\n      bankDetected: bankInfo.name,\n      parserVersion: '2.0'\n    }\n  };\n}\n\n// ============================================================================\n// EXECUTION (FIXED ERROR HANDLING)\n// ============================================================================\n\ntry {\n  const extractedData = extractBankStatementData(textContent);\n  \n  return [{\n    json: extractedData,\n    pairedItem: 0\n  }];\n  \n} catch (error) {\n  let textSample = 'N/A';\n  try {\n    if (typeof textContent === 'string') {\n      textSample = textContent.substring(0, 500);\n    } else if (Array.isArray(textContent)) {\n      textSample = textContent.slice(0, 3).join('\\n');\n    }\n  } catch (e) {\n    textSample = 'Unable to extract sample';\n  }\n  \n  return [{\n    json: {\n      error: true,\n      message: error.message,\n      stack: error.stack,\n      textSample: textSample,\n      textContentType: typeof textContent,\n      isArray: Array.isArray(textContent)\n    },\n    pairedItem: 0\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        192,
        -112
      ],
      "id": "4e803262-f7ee-4f04-9541-73224816fe5c",
      "name": "Extract Bank Info1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://clfdfkkyurghuohjnryy.supabase.co/storage/v1/object/sign/bank-statements/{{ $json.file_path }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"expiresIn\": 3600\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        640,
        -848
      ],
      "id": "9d24a24e-80fc-4559-b48d-53d3a40589a7",
      "name": "Generate Signed URL",
      "credentials": {
        "supabaseApi": {
          "id": "Lnze5Nji3VYuZ5Wo",
          "name": "Previa-Supabase"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://clfdfkkyurghuohjnryy.supabase.co/storage/v1/{{ $json.signedURL }}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        864,
        -848
      ],
      "id": "67978729-5c24-432b-b426-ec446defc3fc",
      "name": "Download File"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"transactions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"date\": { \"type\": \"string\" },\n          \"description\": { \"type\": \"string\" },\n          \"amount\": { \"type\": \"number\" },\n          \"category\": { \"type\": \"string\" }\n        },\n        \"required\": [\"date\", \"description\", \"amount\"]\n      }\n    }\n  },\n  \"required\": [\"transactions\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        3712,
        -320
      ],
      "id": "f15e6d57-9148-41dd-bbcf-63aed9239985",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5",
          "mode": "list",
          "cachedResultName": "gpt-5"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        192,
        320
      ],
      "id": "bc1a8c9e-a9bc-4539-84ca-071388012802",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "mlSSOzkIWj0vcevA",
          "name": "PolicyAI-n8n"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook').item.json.headers['cf-warp-tag-id'] }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        3136,
        -384
      ],
      "id": "83c1414c-b291-4d5a-8a06-5c74c93faaf2",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "be008dab-33b1-4bb0-8c9a-9b8077ef12e2",
              "name": "document_id",
              "value": "={{ $json.body.document_id }}",
              "type": "string"
            },
            {
              "id": "0e611d61-1930-4c6f-b1bc-51962a242671",
              "name": "user_id",
              "value": "={{ $json.body.user_id }}",
              "type": "string"
            },
            {
              "id": "63dd2439-ba8f-48a7-9fa6-fdd2fd2809be",
              "name": "file_url",
              "value": "={{ $json.body.file_url }}",
              "type": "string"
            },
            {
              "id": "b92ea023-f83d-4f9e-a222-738b20c4130f",
              "name": "file_path",
              "value": "={{ $json.body.file_path }}",
              "type": "string"
            },
            {
              "id": "26f2b4b6-147b-4968-9bca-9eb6098b1b58",
              "name": "document_type",
              "value": "={{ $json.body.document_type }}",
              "type": "string"
            },
            {
              "id": "b1feddbf-1e4a-4751-85c6-969f2306ddca",
              "name": "storage_bucket",
              "value": "={{ $json.body.storage_bucket }}",
              "type": "string"
            },
            {
              "id": "18a39ec8-86e7-480c-979a-03cfb27f8785",
              "name": "callback_url",
              "value": "={{ $json.body.callback_url }}",
              "type": "string"
            },
            {
              "id": "423c38ff-b5b2-4009-bb85-c3b3ed4bc152",
              "name": "webhookUrl",
              "value": "={{ $json.webhookUrl }}",
              "type": "string"
            },
            {
              "id": "4d91254e-5492-473a-b7a7-cd63ea2e51d8",
              "name": "executionMode",
              "value": "={{ $json.executionMode }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        416,
        -848
      ],
      "id": "86af826a-c19a-46f8-b581-1aa2193f7bc2",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        192,
        112
      ],
      "id": "c95d9da5-16c6-454b-a9a7-e71ad614cfe8",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "tZ3ovv6egqnDIYgT",
          "name": "Previa-Processing"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Simpler version - just join markdown array\nconst items = $input.all();\n\nconst transformedItems = items.map(item => {\n  const markdown = item.json.markdown || [];\n  const text = Array.isArray(markdown) ? markdown.join('\\n\\n') : String(markdown);\n  \n  return {\n    json: { text: text }\n  };\n});\n\nreturn transformedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2432,
        -848
      ],
      "id": "c2175e5f-f29e-4e74-b320-eff4a8635bae",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9fea51c0-b3a9-49b5-8608-3264c9d00304",
              "name": "extracted_text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2656,
        -848
      ],
      "id": "bc16322d-ccd2-4fa6-8f2a-f3a87092813d",
      "name": "Extracted Text1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-3-haiku-20240307",
          "mode": "list",
          "cachedResultName": "Claude Haiku 3"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        192,
        736
      ],
      "id": "3f5375e9-2c8f-4338-905a-91edb15d35ed",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "4IJJfXQu7Uen3jhC",
          "name": "Previa-Raava-n8n"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude 4 Sonnet"
        },
        "options": {
          "thinking": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        192,
        528
      ],
      "id": "c713fcd2-aff0-4921-998b-8b552e14a5b4",
      "name": "Anthropic Chat Model1",
      "credentials": {
        "anthropicApi": {
          "id": "4IJJfXQu7Uen3jhC",
          "name": "Previa-Raava-n8n"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "claude-3-7-sonnet-20250219",
          "mode": "list",
          "cachedResultName": "claude-3-7-sonnet-20250219"
        },
        "messages": {
          "values": [
            {
              "content": "=Extract all transactions from this bank statement:\n{{ $json.extracted_text }}"
            }
          ]
        },
        "options": {
          "system": "=You are a bank statement transaction extractor. Extract ALL transactions from the provided bank statement text.\n\nRULES:\n1. Parse dates as YYYY-MM-DD\n2. Store all amounts as positive numbers with 2 decimals (e.g., \"4.49\" not \"4.5\")\n3. Classify each transaction type accurately\n4. Track balance after each transaction (CR = credit/positive, DR = debit/negative)\n\nTRANSACTION TYPES:\n- opening_balance: Statement start\n- closing_balance: Statement end\n- purchase: Card purchases (Coles, Google, etc.)\n- deposit: Cash deposits\n- withdrawal: ATM withdrawals\n- transfer_in: Incoming transfers (\"Transfer from\")\n- transfer_out: Outgoing transfers (\"Transfer to\")\n- fee: Bank fees\n- interest: Interest charges\n- refund: Returns/refunds\n- international_fee: Foreign transaction fees\n\nOUTPUT: Return structured JSON matching the provided schema exactly.\n\n{\n  \"statement_metadata\": {\n    \"account_number\": \"12345678\",\n    \"institution\": \"Bank Name\",\n    \"statement_period\": {\n      \"start_date\": \"2025-01-01\",\n      \"end_date\": \"2025-01-31\"\n    }\n  },\n  \"transactions\": [\n    {\n      \"transaction_id\": 1,\n      \"date\": \"2025-01-05\",\n      \"description\": \"Merchant Name Location\",\n      \"debit_amount\": \"10.50\",\n      \"credit_amount\": null,\n      \"balance\": \"100.00\",\n      \"balance_type\": \"CR\",\n      \"transaction_type\": \"purchase\"\n    },\n    {\n      \"transaction_id\": 2,\n      \"date\": \"2025-01-10\",\n      \"description\": \"Cash Deposit\",\n      \"debit_amount\": null,\n      \"credit_amount\": \"500.00\",\n      \"balance\": \"600.00\",\n      \"balance_type\": \"CR\",\n      \"transaction_type\": \"deposit\"\n    }\n  ],\n  \"summary\": {\n    \"opening_balance\": \"0.00\",\n    \"closing_balance\": \"600.00\",\n    \"total_debits\": \"10.50\",\n    \"total_credits\": \"500.00\",\n    \"transaction_count\": 2\n  }\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.anthropic",
      "typeVersion": 1,
      "position": [
        192,
        -1472
      ],
      "id": "3f5a7863-8bdb-4df4-819a-59a97cbb5d4c",
      "name": "Message a model",
      "credentials": {
        "anthropicApi": {
          "id": "4IJJfXQu7Uen3jhC",
          "name": "Previa-Raava-n8n"
        }
      }
    },
    {
      "parameters": {
        "model": "deepseek-reasoner",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        3456,
        -320
      ],
      "id": "a11c08b2-74b5-4805-9993-2973583158ce",
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "N372dcfgK3pSaBKr",
          "name": "Pevia"
        }
      }
    },
    {
      "parameters": {
        "description": "Use the tool to think about transaction data extraction.\nIn scanned bank statements, Output should ensure that transaction data remains aligned with corresponding dates and balances, maintaining data structure .\n\n**Implement validation:**\n1. After extraction, count the number of transactions\n2. Use a second AI call to verify: \"I found X transactions. Please verify this count against the document.\"\n3. For very long documents, extract by page or section, then combine"
      },
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        3584,
        -320
      ],
      "id": "8f0b409a-76db-4ec2-8a8e-1e094d48f006",
      "name": "Think"
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.transactions",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3920,
        -544
      ],
      "id": "1992e934-3eec-4c19-9407-8cb312c08954",
      "name": "Split Out2"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"transactions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"date\": { \"type\": \"string\" },\n          \"description\": { \"type\": \"string\" },\n          \"amount\": { \"type\": \"string\" },\n          \"category\": { \"type\": \"string\" }\n        },\n        \"required\": [\"date\", \"description\", \"amount\"]\n      }\n    }\n  },\n  \"required\": [\"transactions\"]\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        4224,
        -320
      ],
      "id": "cfd1f033-1fc1-44cd-bbe5-c129995edf6d",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2880,
        -576
      ],
      "id": "ffe11ecc-4ee5-4c9c-9aa4-0b3a648c592c",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "tZ3ovv6egqnDIYgT",
          "name": "Previa-Processing"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.transactions",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        4592,
        -544
      ],
      "id": "93dab417-741a-4054-99a4-f439dddae251",
      "name": "Split Out3"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"bankAccount\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Name\": { \"type\": \"string\" },\n          \"Number\": { \"type\": \"string\" },\n          \"Bank\": { \"type\": \"string\" },\n          \"Balance\": { \"type\": \"number\" },\n          \"Currency\": { \"type\": \"string\" },\n          \"Type\": { \"type\": \"string\" },\n          \"StartDate\": { \"type\": \"string\" },\n          \"EndDate\": { \"type\": \"string\" }\n\n        },\n        \"required\": [\"Name\", \"Number\", \"Bank\", \"Balance\", \"Currency\", \"Type\", \"StartDate\", \"EndDate\"]\n      }\n    }\n  },\n  \"required\": [\"bankAccount\"]\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        3088,
        -816
      ],
      "id": "c19b863b-c573-49b4-abfe-11301f14db31",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "tableId": "bank_accounts",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "user_id",
              "fieldValue": "={{ $('Webhook').item.json.body.user_id }}"
            },
            {
              "fieldId": "institution",
              "fieldValue": "={{ $json.output.bankAccount[0].Bank }}"
            },
            {
              "fieldId": "account_name",
              "fieldValue": "={{ $json.output.bankAccount[0].Type }}"
            },
            {
              "fieldId": "account_number_masked",
              "fieldValue": "={{ $json.output.bankAccount[0].Number }}"
            },
            {
              "fieldId": "balance",
              "fieldValue": "={{ $json.output.bankAccount[0].Balance }}"
            },
            {
              "fieldId": "currency",
              "fieldValue": "={{ $json.output.bankAccount[0].Currency }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        3568,
        -1136
      ],
      "id": "fe10375d-0329-4e7f-96f9-dbddca0ef2ec",
      "name": "DB - Create Bank Account",
      "credentials": {
        "supabaseApi": {
          "id": "Lnze5Nji3VYuZ5Wo",
          "name": "Previa-Supabase"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        4208,
        -112
      ],
      "id": "cbdecfd0-c1c7-4f10-bb0c-5d02e74553d4",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "tZ3ovv6egqnDIYgT",
          "name": "Previa-Processing"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.extracted_text }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a bank statement transaction extractor. Extract ALL transactions from the provided bank statement text.\n\nRULES:\n1. Parse dates as YYYY-MM-DD\n2. Store all amounts as positive numbers with 2 decimals (e.g., \"4.49\" not \"4.5\")\n3. Classify each transaction type accurately\n4. Track balance after each transaction (CR = credit/positive, DR = debit/negative)\n\nTRANSACTION TYPES:\n- opening_balance: Statement start\n- closing_balance: Statement end\n- purchase: Card purchases (Coles, Google, etc.)\n- deposit: Cash deposits\n- withdrawal: ATM withdrawals\n- transfer_in: Incoming transfers (\"Transfer from\")\n- transfer_out: Outgoing transfers (\"Transfer to\")\n- fee: Bank fees\n- interest: Interest charges\n- refund: Returns/refunds\n- international_fee: Foreign transaction fees\n\nOUTPUT: Return structured JSON matching the provided schema exactly."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        3504,
        -544
      ],
      "id": "cd75e713-4790-41b7-af09-fe6d9e102bc4",
      "name": "AI - Transaction Extract",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Date:{{ $json.date }}\nDescription:{{ $json.description }}\nAmount:{{ $json.amount }}\nCategory:{{ $json.category }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "Categorize and optimize the wording for the provided single bank transaction. The transaction will include a date, description, amount, and category.\n\n- Convert the transaction amount to a string prefixed with \"+\" for credits to the account (e.g., salary, interest, deposits) and \"-\" for debits (e.g., purchases, payments, withdrawals), according to the transaction context.\n- Assign one of the following categories to the transaction, based on its description and context: \n  - \"Utilities\"\n  - \"Groceries\"\n  - \"Fuel\"\n  - \"Purchase\" (if the category is unclear or unknown)\n  - \"Income\"\n  - \"Subscriptions\"\n  - \"Dining\"\n  - \"Interest\"\n  - \"Withdrawal\"\n- If the original category is missing or ambiguous, infer the correct category from the transaction description, defaulting to \"Purchase\" as needed.\n- Rephrase the transaction description to be concise but informative; remove unnecessary or redundant words if possible.\n- All output must be presented strictly in the specified JSON schema below. Ensure all required fields are populated.\n- Do not include any explanation or additional commentary—just output the final JSON.\n\n**Reasoning before conclusion:**  \nBefore outputting, perform all reasoning (categorization, amount conversion, description rewording) internally. Only output the JSON result after completing all reasoning steps.\n\n# Output Format\n\nOutput strictly the JSON object formatted as:\n\n{\n  \"date\": \"[YYYY-MM-DD]\",\n  \"description\": \"[Concise, optimized description]\",\n  \"amount\": \"[String: use + or - prefix]\",\n  \"category\": \"[One from the specified list]\"\n}\n\n# Example\n\nInput:\n{\n  \"date\": \"2024-06-13\",\n  \"description\": \"GROCERY MART - DOWNTOWN\",\n  \"amount\": 92.5,\n  \"category\": \"\"\n}\n\nOutput:\n{\n  \"date\": \"2024-06-13\",\n  \"description\": \"Grocery Mart (downtown)\",\n  \"amount\": \"-92.5\",\n  \"category\": \"Groceries\"\n}\n\n(For complex inputs, adapt the description and category as per requirements—real inputs may differ in wording and intent.)\n\n---\n\n**Important Reminder:**  \n- Think through categorization, amount format, and description rewording, then only output the final JSON object.\n- Output only well-formatted JSON according to the schema and nothing else.\n- Only use these categories: Utilities, Groceries, Fuel, Purchase (if unknown), Income, Subscriptions, Dining, Interest, Withdrawal.\n- Prefix amount with \"+\" for credit, \"-\" for debit, as per transaction meaning.",
          "returnIntermediateSteps": false,
          "batching": {
            "batchSize": 5,
            "delayBetweenBatches": 300
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        4144,
        -544
      ],
      "id": "960088e7-5a57-43e8-b2f8-e8ca65b2cfa0",
      "name": "AI - Transaction Categorize",
      "executeOnce": false
    },
    {
      "parameters": {
        "tableId": "transactions",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "user_id",
              "fieldValue": "={{ $('Webhook').item.json.body.user_id }}"
            },
            {
              "fieldId": "bank_statement_id",
              "fieldValue": "={{ $('Set Bank Info').item.json[\"Document ID\"] }}"
            },
            {
              "fieldId": "transaction_date",
              "fieldValue": "={{ $json.date }}"
            },
            {
              "fieldId": "description",
              "fieldValue": "={{ $json.description }}"
            },
            {
              "fieldId": "amount",
              "fieldValue": "={{ $json.amount }}"
            },
            {
              "fieldId": "category",
              "fieldValue": "={{ $json.category }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "unreconciled"
            },
            {
              "fieldId": "created_at",
              "fieldValue": "={{ $now.toString() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        5024,
        -592
      ],
      "id": "6c8a5c90-2a2a-46c1-ab44-ad18b92f2aa2",
      "name": "DB - Create Transactions",
      "credentials": {
        "supabaseApi": {
          "id": "Lnze5Nji3VYuZ5Wo",
          "name": "Previa-Supabase"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.extracted_text }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Extract the following details from a provided bank account statement in markdown format:\n\n- Account Name\n- Account Number\n- Institution (Bank Name)\n- Balance\n- Currency (Type)\n- Account Type (e.g., Everyday Transaction, Business Savings, etc.)\n- Statement Start Date\n- Statement End Date\n\nReturn a JSON output using this schema:\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"bankAccount\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Name\": { \"type\": \"string\" },\n          \"Number\": { \"type\": \"string\" },\n          \"Bank\": { \"type\": \"string\" },\n          \"Balance\": { \"type\": \"number\" },\n          \"Currency\": { \"type\": \"string\" },\n          \"Type\": { \"type\": \"string\" },\n          \"StartDate\": { \"type\": \"string\" },\n          \"EndDate\": { \"type\": \"string\" }\n        },\n        \"required\": [\"Name\", \"Number\", \"Bank\", \"Balance\", \"Currency\", \"Type\", \"StartDate\", \"EndDate\"]\n      }\n    }\n  },\n  \"required\": [\"bankAccount\"]\n}\n\nFor each of the required fields, if information is missing or unclear in the input, use an empty string (\"\") for string fields and 0 for numeric fields. Consider multiple accounts if present and add each to the bankAccount array.\n\n### Reasoning:\nBefore producing your final output, reason internally and step-by-step:\n- Parse the markdown to identify sections and tabular data.\n- Determine which lines or segments contain each required field.\n- For any ambiguous or missing data, justify your best estimate or leave empty as specified.\nDo not output conclusions or the JSON result before all reasoning steps are complete.\n\n### Output Format:\n- Return only the JSON object, not in a code block.\n- Ensure all properties listed in the schema are included for each account.\n\n---\n\n#### Example\n**Input:**\n```\n# Account Statement\n\n**Account Name:** John Doe  \n**Account Number:** 987654321  \n**Bank:** SampleBank  \n**Balance:** 2,500.75 USD  \n**Account Type:** Everyday Transaction  \n**Statement Period:** Jan 1, 2023 - Jan 31, 2023  \n```\n\n**Expected JSON Output:**\n{\n  \"bankAccount\": [\n    {\n      \"Name\": \"John Doe\",\n      \"Number\": \"987654321\",\n      \"Bank\": \"SampleBank\",\n      \"Balance\": 2500.75,\n      \"Currency\": \"USD\",\n      \"Type\": \"Everyday Transaction\",\n      \"StartDate\": \"2023-01-01\",\n      \"EndDate\": \"2023-01-31\"\n    }\n  ]\n}\n\n(For real examples, include all fields clearly and use standard date formatting; if ambiguous, do your best with the information provided.)\n\n---\n\n**Important Instructions Reminder:**\n- Extract all specified fields for each account found.\n- Output only the requested JSON, not wrapped in code blocks.\n- Leave missing info as \"\" or 0.\n- Think and reason through extraction steps before producing your final output.",
          "enableStreaming": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2880,
        -1040
      ],
      "id": "788e918b-3595-436b-9018-ec742c9b9140",
      "name": "Ai - Extract Bank Account Info"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3920,
        -944
      ],
      "id": "2ca31e47-7663-485f-b1bd-640fa2d4f938",
      "name": "Merge",
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "bank_statements",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json['Document ID'] }}"
            },
            {
              "keyName": "user_id",
              "condition": "eq",
              "keyValue": "={{ $json['User ID'] }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "bank_account_id",
              "fieldValue": "={{ $json['Bank Account ID'] }}"
            },
            {
              "fieldId": "period_start",
              "fieldValue": "={{ $json.StartDate }}"
            },
            {
              "fieldId": "period_end",
              "fieldValue": "={{ $json.EndDate }}"
            },
            {
              "fieldId": "processing_status",
              "fieldValue": "pending"
            },
            {
              "fieldId": "extracted_at",
              "fieldValue": "={{ $now.toLocaleString({timeStyle:'medium',dateStyle:'short'}) }}"
            },
            {
              "fieldId": "extraction_confidence",
              "fieldValue": "0.9"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        5136,
        -944
      ],
      "id": "b4256872-999f-445f-aec2-8574478cf67f",
      "name": "Update a row",
      "credentials": {
        "supabaseApi": {
          "id": "Lnze5Nji3VYuZ5Wo",
          "name": "Previa-Supabase"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3920,
        -1184
      ],
      "id": "d76867e9-19bd-4605-831c-57e8ba6efb50",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "767f0fa0-4a8d-4d56-bf9f-f7baea6b33c8",
              "name": "Account Name",
              "value": "={{ $json.Account_Info[1].Name }}",
              "type": "string"
            },
            {
              "id": "b85806db-2f26-4099-8dc8-62a736a8d575",
              "name": "Number",
              "value": "={{ $json.Account_Info[0].account_number_masked }}",
              "type": "string"
            },
            {
              "id": "c77c8064-194c-4dae-9438-d9d7ff5153a7",
              "name": "Bank",
              "value": "={{ $json.Account_Info[0].institution }}",
              "type": "string"
            },
            {
              "id": "cb3aee60-f4d0-4753-9a83-94f5a53548ea",
              "name": "Type",
              "value": "={{ $json.Account_Info[0].account_name }}",
              "type": "string"
            },
            {
              "id": "670dc1bb-4afc-4619-a156-bff8b1365b3b",
              "name": "StartDate",
              "value": "={{ $json.Account_Info[1].StartDate }}",
              "type": "string"
            },
            {
              "id": "ab5e2e34-070f-4236-9832-adf67f578a3a",
              "name": "EndDate",
              "value": "={{ $json.Account_Info[1].EndDate }}",
              "type": "string"
            },
            {
              "id": "3ea4e317-dc94-4e36-a731-7697aa45c70f",
              "name": "Balance",
              "value": "={{ $json.Account_Info[0].balance }}",
              "type": "string"
            },
            {
              "id": "007c6e59-1afc-4149-a552-57e2ce09a94a",
              "name": "Currency",
              "value": "={{ $json.Account_Info[0].currency }}",
              "type": "string"
            },
            {
              "id": "a175a824-1939-48af-a2d2-f84d5caa698a",
              "name": "User ID",
              "value": "={{ $json.Account_Info[0].user_id }}",
              "type": "string"
            },
            {
              "id": "f5965a04-008e-4a2f-93fb-6324d3d66ac9",
              "name": "Bank Account ID",
              "value": "={{ $json.Account_Info[0].id }}",
              "type": "string"
            },
            {
              "id": "5f38c2e8-dd09-420b-af9f-537063fd1e76",
              "name": "Document ID",
              "value": "={{ $('Webhook').item.json.body.document_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4592,
        -944
      ],
      "id": "60258023-2752-4502-afcb-d3f51927eb7a",
      "name": "Set Bank Info"
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.bankAccount",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3568,
        -896
      ],
      "id": "319d68da-43a9-4ea6-b81e-0bdaf38da184",
      "name": "Split Out4"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "Account_Info",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        4256,
        -944
      ],
      "id": "4d4e06a7-e3ef-4db6-87a6-45bab24b5ad3",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        4816,
        -592
      ],
      "id": "7eb97ffa-5c2f-4934-a2ab-7271dc638c7b",
      "name": "Merge1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        5392,
        -640
      ],
      "id": "bef39a73-5f72-4721-95ae-658b15462d1d",
      "name": "Merge2",
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "bank_statements",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.bank_statement_id }}"
            },
            {
              "keyName": "user_id",
              "condition": "eq",
              "keyValue": "={{ $json.user_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "processing_status",
              "fieldValue": "completed"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        5600,
        -656
      ],
      "id": "9e7b4d72-5332-4982-9de0-bd29f88eb733",
      "name": "Update a row1",
      "credentials": {
        "supabaseApi": {
          "id": "Lnze5Nji3VYuZ5Wo",
          "name": "Previa-Supabase"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n-prod.coralshades.ai",
            "user-agent": "Deno/2.1.4 (variant; SupabaseEdgeRuntime/1.69.4)",
            "content-length": "551",
            "accept": "*/*",
            "accept-encoding": "gzip, br",
            "accept-language": "*",
            "authorization": "Coral@123",
            "cdn-loop": "cloudflare; loops=1",
            "cf-connecting-ip": "2406:da1c:136:5d09:8fe8:ea99:f6b1:16a8",
            "cf-ipcountry": "AU",
            "cf-ray": "994ed8bb5eba6a0c-TLH",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-warp-tag-id": "185275f9-ee94-48f7-acee-2077082588aa",
            "connection": "keep-alive",
            "content-type": "application/json",
            "x-forwarded-for": "2406:da1c:136:5d09:8fe8:ea99:f6b1:16a8",
            "x-forwarded-proto": "https"
          },
          "params": {},
          "query": {},
          "body": {
            "document_id": "418c150e-62b0-4883-b44e-fc0388948835",
            "user_id": "76a5b328-4c46-46ba-8eb3-83808203bf83",
            "file_url": "https://clfdfkkyurghuohjnryy.supabase.co/storage/v1/object/public/bank-statements/76a5b328-4c46-46ba-8eb3-83808203bf83/1761533008935_1761156194529_Statement20250831.pdf",
            "file_path": "76a5b328-4c46-46ba-8eb3-83808203bf83/1761533008935_1761156194529_Statement20250831.pdf",
            "document_type": "bank_statement",
            "storage_bucket": "bank-statements",
            "callback_url": "https://clfdfkkyurghuohjnryy.supabase.co/functions/v1/process-document-callback"
          },
          "webhookUrl": "https://n8n-prod.coralshades.ai/webhook/upload-statement",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Mistral DOC OCR": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Signed URL": {
      "main": [
        [
          {
            "node": "Mistral DOC OCR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Upload": {
      "main": [
        [
          {
            "node": "Mistral Signed URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Bank Info1": {
      "main": [
        [
          {
            "node": "Extracted Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Signed URL": {
      "main": [
        [
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File": {
      "main": [
        [
          {
            "node": "Mistral Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "AI - Transaction Extract",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        []
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI - Transaction Extract",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Ai - Extract Bank Account Info",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Generate Signed URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Extracted Text1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extracted Text1": {
      "main": [
        [
          {
            "node": "AI - Transaction Extract",
            "type": "main",
            "index": 0
          },
          {
            "node": "Ai - Extract Bank Account Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI - Transaction Extract",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "AI - Transaction Extract",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Split Out2": {
      "main": [
        [
          {
            "node": "AI - Transaction Categorize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI - Transaction Categorize",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Ai - Extract Bank Account Info",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Structured Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Split Out3": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Ai - Extract Bank Account Info",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI - Transaction Categorize",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI - Transaction Extract": {
      "main": [
        [
          {
            "node": "Split Out2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI - Transaction Categorize": {
      "main": [
        [
          {
            "node": "Split Out3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB - Create Transactions": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Ai - Extract Bank Account Info": {
      "main": [
        [
          {
            "node": "DB - Create Bank Account",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split Out4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB - Create Bank Account": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Bank Info": {
      "main": [
        [
          {
            "node": "Update a row",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out4": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Set Bank Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "DB - Create Transactions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update a row": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Update a row1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d3cbd8d7-158b-4550-b9a8-8d68bbf4cdf6",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1611a0f2d6b428cf9dbc76c998e83bf12ee9b56fcdc3e5a977e5ca4acf1cbdb0"
  },
  "id": "tjJzN3Z94PeEtMDC",
  "tags": [
    {
      "createdAt": "2025-08-27T03:11:51.581Z",
      "updatedAt": "2025-10-09T22:42:16.758Z",
      "id": "xJmN110gg6kaxmfw",
      "name": "Previa"
    }
  ]
}